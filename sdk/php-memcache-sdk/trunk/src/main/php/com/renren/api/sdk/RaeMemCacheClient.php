<?php
	
$GLOBALS['THRIFT_ROOT'] = 'thrift';	
require_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';
require_once $GLOBALS['THRIFT_ROOT'].'/protocol/TBinaryProtocol.php';
require_once $GLOBALS['THRIFT_ROOT'].'/protocol/TCompactProtocol.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TSocket.php';
require_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';

// Load the package that we autogenerated for this tutorial
require_once $GLOBALS['THRIFT_ROOT'].'/packages/opencloud/ConnectionService.php';	
	
class RaeMemCacheClient {
    private $mc ;
    public function __construct($key){
    	try{
    	$socket = new TSocket('10.32.16.81', 7911);
        $transport = new TBufferedTransport($socket, 1024, 1024);
        $protocol = new TCompactProtocol($transport);
        $client  =  new ConnectionServiceClient($protocol,$protocol);
        // Open up the connection$
        $transport->open();
        $connection = $client->getConnection($key,'memcache');
        $this->mc=new Memcache();
        $this->mc->connect($connection[0]->address,$connection[0]->port,1);

        $transport->close();
     }
     catch (ArithmaticException $ae) {
     	 echo "ArithmatixException: ".$ae->msg."\r\n";

     }
      catch (MatrixException  $ae) {
     	 echo "MatrixException : ".$ae->msg."\r\n";

     }catch (TException  $ae) {
     	 echo "TException : ".$ae->getMessage()."\r\n";
     	 echo $ae->getTraceAsString();

     }
   }
   public function get( $key, $cache_cb = null, &$cas_token = null ) {
       return $this->mc->get($key,$cache_cb,&$cas_token);

   }


   public function add( $key, $value, $expiration = 0 ) {

        return $this->mc->add($key,$value,$expiration);
    }

	public function addByKey( $server_key, $key, $value, $expiration = 0 ) {;;}

	public function append( $key, $value ) {;;}

	public function appendByKey( $server_key, $key, $value ) {;;}

	public function prepend( $key, $value ) {;;}

	public function prependByKey( $server_key, $key, $value ) {;;}

	public function replace( $key, $value, $expiration = 0 ) {;;}

	public function replaceByKey( $server_key, $key, $value, $expiration = 0 ) {;;}

	public function delete( $key, $time = 0 ) {;;}

	public function deleteByKey( $server_key, $key, $time = 0 ) {;;}

	public function deleteMulti( array $keys, $expiration = 0 ) {;;}

	public function deleteMultiByKey( $server_key, array $keys, $expiration = 0 ) {;;}

	public function increment( $key, $offset = 1) {;;}

	public function decrement( $key, $offset = 1) {;;}

	public function getOption( $option ) {;;}
	
	public function setOption( $option, $value ) {;;}

	public function setOptions( array $options ) {;;}

	public function addServer( $host, $port,  $weight = 0 ) {;;}

	public function addServers( array $servers ) {;;}

	public function getServerList( ) {;;}

	public function getServerByKey( $server_key ) {;;}

	public function flush( $delay = 0 ) {;;}

	public function getStats( ) {;;}
	
	public function getVersion( ) {;;}

	public function getResultCode( ) {;;}

	public function getResultMessage( ) {;;}

	public function isPersistent( ) {;;}

	public function isPristine( ) {;;}
    
}

$ct = new RaeMemCacheClient("sadfsadgdsfsaxfsdaewrwdfsadf");

print '$ct->add("test") been called';
$ct->add("test","12123123test");

print '$ct->get("test")'.$ct->get("test");

	
	
