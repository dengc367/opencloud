/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.open.api.test;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Log;
import org.slf4j.LogFactory;

public class CrazyNesting implements org.apache.thrift.TBase<CrazyNesting, CrazyNesting._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrazyNesting");

  private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("string_field", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SET_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("set_field", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField LIST_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("list_field", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrazyNestingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrazyNestingTupleSchemeFactory());
  }

  public String string_field; // required
  public Set<Insanity> set_field; // optional
  public List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> list_field; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_FIELD((short)1, "string_field"),
    SET_FIELD((short)2, "set_field"),
    LIST_FIELD((short)3, "list_field");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_FIELD
          return STRING_FIELD;
        case 2: // SET_FIELD
          return SET_FIELD;
        case 3: // LIST_FIELD
          return LIST_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SET_FIELD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("string_field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SET_FIELD, new org.apache.thrift.meta_data.FieldMetaData("set_field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Insanity.class))));
    tmpMap.put(_Fields.LIST_FIELD, new org.apache.thrift.meta_data.FieldMetaData("list_field", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)), 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Insanity.class), 
                                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrazyNesting.class, metaDataMap);
  }

  public CrazyNesting() {
  }

  public CrazyNesting(
    String string_field,
    List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> list_field)
  {
    this();
    this.string_field = string_field;
    this.list_field = list_field;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrazyNesting(CrazyNesting other) {
    if (other.isSetString_field()) {
      this.string_field = other.string_field;
    }
    if (other.isSetSet_field()) {
      Set<Insanity> __this__set_field = new HashSet<Insanity>();
      for (Insanity other_element : other.set_field) {
        __this__set_field.add(new Insanity(other_element));
      }
      this.set_field = __this__set_field;
    }
    if (other.isSetList_field()) {
      List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> __this__list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>();
      for (Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> other_element : other.list_field) {
        Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> __this__list_field_copy = new HashMap<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>();
        for (Map.Entry<Set<Integer>, Map<Integer,Set<List<Map<Insanity,String>>>>> other_element_element : other_element.entrySet()) {

          Set<Integer> other_element_element_key = other_element_element.getKey();
          Map<Integer,Set<List<Map<Insanity,String>>>> other_element_element_value = other_element_element.getValue();

          Set<Integer> __this__list_field_copy_copy_key = new HashSet<Integer>();
          for (Integer other_element_element_key_element : other_element_element_key) {
            __this__list_field_copy_copy_key.add(other_element_element_key_element);
          }

          Map<Integer,Set<List<Map<Insanity,String>>>> __this__list_field_copy_copy_value = new HashMap<Integer,Set<List<Map<Insanity,String>>>>();
          for (Map.Entry<Integer, Set<List<Map<Insanity,String>>>> other_element_element_value_element : other_element_element_value.entrySet()) {

            Integer other_element_element_value_element_key = other_element_element_value_element.getKey();
            Set<List<Map<Insanity,String>>> other_element_element_value_element_value = other_element_element_value_element.getValue();

            Integer __this__list_field_copy_copy_value_copy_key = other_element_element_value_element_key;

            Set<List<Map<Insanity,String>>> __this__list_field_copy_copy_value_copy_value = new HashSet<List<Map<Insanity,String>>>();
            for (List<Map<Insanity,String>> other_element_element_value_element_value_element : other_element_element_value_element_value) {
              List<Map<Insanity,String>> __this__list_field_copy_copy_value_copy_value_copy = new ArrayList<Map<Insanity,String>>();
              for (Map<Insanity,String> other_element_element_value_element_value_element_element : other_element_element_value_element_value_element) {
                Map<Insanity,String> __this__list_field_copy_copy_value_copy_value_copy_copy = new HashMap<Insanity,String>();
                for (Map.Entry<Insanity, String> other_element_element_value_element_value_element_element_element : other_element_element_value_element_value_element_element.entrySet()) {

                  Insanity other_element_element_value_element_value_element_element_element_key = other_element_element_value_element_value_element_element_element.getKey();
                  String other_element_element_value_element_value_element_element_element_value = other_element_element_value_element_value_element_element_element.getValue();

                  Insanity __this__list_field_copy_copy_value_copy_value_copy_copy_copy_key = new Insanity(other_element_element_value_element_value_element_element_element_key);

                  String __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value = other_element_element_value_element_value_element_element_element_value;

                  __this__list_field_copy_copy_value_copy_value_copy_copy.put(__this__list_field_copy_copy_value_copy_value_copy_copy_copy_key, __this__list_field_copy_copy_value_copy_value_copy_copy_copy_value);
                }
                __this__list_field_copy_copy_value_copy_value_copy.add(__this__list_field_copy_copy_value_copy_value_copy_copy);
              }
              __this__list_field_copy_copy_value_copy_value.add(__this__list_field_copy_copy_value_copy_value_copy);
            }

            __this__list_field_copy_copy_value.put(__this__list_field_copy_copy_value_copy_key, __this__list_field_copy_copy_value_copy_value);
          }

          __this__list_field_copy.put(__this__list_field_copy_copy_key, __this__list_field_copy_copy_value);
        }
        __this__list_field.add(__this__list_field_copy);
      }
      this.list_field = __this__list_field;
    }
  }

  public CrazyNesting deepCopy() {
    return new CrazyNesting(this);
  }

  @Override
  public void clear() {
    this.string_field = null;
    this.set_field = null;
    this.list_field = null;
  }

  public String getString_field() {
    return this.string_field;
  }

  public CrazyNesting setString_field(String string_field) {
    this.string_field = string_field;
    return this;
  }

  public void unsetString_field() {
    this.string_field = null;
  }

  /** Returns true if field string_field is set (has been assigned a value) and false otherwise */
  public boolean isSetString_field() {
    return this.string_field != null;
  }

  public void setString_fieldIsSet(boolean value) {
    if (!value) {
      this.string_field = null;
    }
  }

  public int getSet_fieldSize() {
    return (this.set_field == null) ? 0 : this.set_field.size();
  }

  public java.util.Iterator<Insanity> getSet_fieldIterator() {
    return (this.set_field == null) ? null : this.set_field.iterator();
  }

  public void addToSet_field(Insanity elem) {
    if (this.set_field == null) {
      this.set_field = new HashSet<Insanity>();
    }
    this.set_field.add(elem);
  }

  public Set<Insanity> getSet_field() {
    return this.set_field;
  }

  public CrazyNesting setSet_field(Set<Insanity> set_field) {
    this.set_field = set_field;
    return this;
  }

  public void unsetSet_field() {
    this.set_field = null;
  }

  /** Returns true if field set_field is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_field() {
    return this.set_field != null;
  }

  public void setSet_fieldIsSet(boolean value) {
    if (!value) {
      this.set_field = null;
    }
  }

  public int getList_fieldSize() {
    return (this.list_field == null) ? 0 : this.list_field.size();
  }

  public java.util.Iterator<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> getList_fieldIterator() {
    return (this.list_field == null) ? null : this.list_field.iterator();
  }

  public void addToList_field(Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> elem) {
    if (this.list_field == null) {
      this.list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>();
    }
    this.list_field.add(elem);
  }

  public List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> getList_field() {
    return this.list_field;
  }

  public CrazyNesting setList_field(List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>> list_field) {
    this.list_field = list_field;
    return this;
  }

  public void unsetList_field() {
    this.list_field = null;
  }

  /** Returns true if field list_field is set (has been assigned a value) and false otherwise */
  public boolean isSetList_field() {
    return this.list_field != null;
  }

  public void setList_fieldIsSet(boolean value) {
    if (!value) {
      this.list_field = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRING_FIELD:
      if (value == null) {
        unsetString_field();
      } else {
        setString_field((String)value);
      }
      break;

    case SET_FIELD:
      if (value == null) {
        unsetSet_field();
      } else {
        setSet_field((Set<Insanity>)value);
      }
      break;

    case LIST_FIELD:
      if (value == null) {
        unsetList_field();
      } else {
        setList_field((List<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING_FIELD:
      return getString_field();

    case SET_FIELD:
      return getSet_field();

    case LIST_FIELD:
      return getList_field();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRING_FIELD:
      return isSetString_field();
    case SET_FIELD:
      return isSetSet_field();
    case LIST_FIELD:
      return isSetList_field();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrazyNesting)
      return this.equals((CrazyNesting)that);
    return false;
  }

  public boolean equals(CrazyNesting that) {
    if (that == null)
      return false;

    boolean this_present_string_field = true && this.isSetString_field();
    boolean that_present_string_field = true && that.isSetString_field();
    if (this_present_string_field || that_present_string_field) {
      if (!(this_present_string_field && that_present_string_field))
        return false;
      if (!this.string_field.equals(that.string_field))
        return false;
    }

    boolean this_present_set_field = true && this.isSetSet_field();
    boolean that_present_set_field = true && that.isSetSet_field();
    if (this_present_set_field || that_present_set_field) {
      if (!(this_present_set_field && that_present_set_field))
        return false;
      if (!this.set_field.equals(that.set_field))
        return false;
    }

    boolean this_present_list_field = true && this.isSetList_field();
    boolean that_present_list_field = true && that.isSetList_field();
    if (this_present_list_field || that_present_list_field) {
      if (!(this_present_list_field && that_present_list_field))
        return false;
      if (!this.list_field.equals(that.list_field))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CrazyNesting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CrazyNesting typedOther = (CrazyNesting)other;

    lastComparison = Boolean.valueOf(isSetString_field()).compareTo(typedOther.isSetString_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_field, typedOther.string_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_field()).compareTo(typedOther.isSetSet_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_field, typedOther.set_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetList_field()).compareTo(typedOther.isSetList_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetList_field()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_field, typedOther.list_field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrazyNesting(");
    boolean first = true;

    sb.append("string_field:");
    if (this.string_field == null) {
      sb.append("null");
    } else {
      sb.append(this.string_field);
    }
    first = false;
    if (isSetSet_field()) {
      if (!first) sb.append(", ");
      sb.append("set_field:");
      if (this.set_field == null) {
        sb.append("null");
      } else {
        sb.append(this.set_field);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("list_field:");
    if (this.list_field == null) {
      sb.append("null");
    } else {
      sb.append(this.list_field);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (list_field == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'list_field' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrazyNestingStandardSchemeFactory implements SchemeFactory {
    public CrazyNestingStandardScheme getScheme() {
      return new CrazyNestingStandardScheme();
    }
  }

  private static class CrazyNestingStandardScheme extends StandardScheme<CrazyNesting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrazyNesting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRING_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_field = iprot.readString();
              struct.setString_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SET_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.set_field = new HashSet<Insanity>(2*_set18.size);
                for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                {
                  Insanity _elem20; // required
                  _elem20 = new Insanity();
                  _elem20.read(iprot);
                  struct.set_field.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setSet_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIST_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> _elem23; // required
                  {
                    org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                    _elem23 = new HashMap<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>(2*_map24.size);
                    for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                    {
                      Set<Integer> _key26; // required
                      Map<Integer,Set<List<Map<Insanity,String>>>> _val27; // required
                      {
                        org.apache.thrift.protocol.TSet _set28 = iprot.readSetBegin();
                        _key26 = new HashSet<Integer>(2*_set28.size);
                        for (int _i29 = 0; _i29 < _set28.size; ++_i29)
                        {
                          int _elem30; // required
                          _elem30 = iprot.readI32();
                          _key26.add(_elem30);
                        }
                        iprot.readSetEnd();
                      }
                      {
                        org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                        _val27 = new HashMap<Integer,Set<List<Map<Insanity,String>>>>(2*_map31.size);
                        for (int _i32 = 0; _i32 < _map31.size; ++_i32)
                        {
                          int _key33; // required
                          Set<List<Map<Insanity,String>>> _val34; // required
                          _key33 = iprot.readI32();
                          {
                            org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                            _val34 = new HashSet<List<Map<Insanity,String>>>(2*_set35.size);
                            for (int _i36 = 0; _i36 < _set35.size; ++_i36)
                            {
                              List<Map<Insanity,String>> _elem37; // required
                              {
                                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                                _elem37 = new ArrayList<Map<Insanity,String>>(_list38.size);
                                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                                {
                                  Map<Insanity,String> _elem40; // required
                                  {
                                    org.apache.thrift.protocol.TMap _map41 = iprot.readMapBegin();
                                    _elem40 = new HashMap<Insanity,String>(2*_map41.size);
                                    for (int _i42 = 0; _i42 < _map41.size; ++_i42)
                                    {
                                      Insanity _key43; // required
                                      String _val44; // required
                                      _key43 = new Insanity();
                                      _key43.read(iprot);
                                      _val44 = iprot.readString();
                                      _elem40.put(_key43, _val44);
                                    }
                                    iprot.readMapEnd();
                                  }
                                  _elem37.add(_elem40);
                                }
                                iprot.readListEnd();
                              }
                              _val34.add(_elem37);
                            }
                            iprot.readSetEnd();
                          }
                          _val27.put(_key33, _val34);
                        }
                        iprot.readMapEnd();
                      }
                      _elem23.put(_key26, _val27);
                    }
                    iprot.readMapEnd();
                  }
                  struct.list_field.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setList_fieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrazyNesting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.string_field != null) {
        oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
        oprot.writeString(struct.string_field);
        oprot.writeFieldEnd();
      }
      if (struct.set_field != null) {
        if (struct.isSetSet_field()) {
          oprot.writeFieldBegin(SET_FIELD_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.set_field.size()));
            for (Insanity _iter45 : struct.set_field)
            {
              _iter45.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_field != null) {
        oprot.writeFieldBegin(LIST_FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.list_field.size()));
          for (Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> _iter46 : struct.list_field)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.MAP, _iter46.size()));
              for (Map.Entry<Set<Integer>, Map<Integer,Set<List<Map<Insanity,String>>>>> _iter47 : _iter46.entrySet())
              {
                {
                  oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter47.getKey().size()));
                  for (int _iter48 : _iter47.getKey())
                  {
                    oprot.writeI32(_iter48);
                  }
                  oprot.writeSetEnd();
                }
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, _iter47.getValue().size()));
                  for (Map.Entry<Integer, Set<List<Map<Insanity,String>>>> _iter49 : _iter47.getValue().entrySet())
                  {
                    oprot.writeI32(_iter49.getKey());
                    {
                      oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, _iter49.getValue().size()));
                      for (List<Map<Insanity,String>> _iter50 : _iter49.getValue())
                      {
                        {
                          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter50.size()));
                          for (Map<Insanity,String> _iter51 : _iter50)
                          {
                            {
                              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING, _iter51.size()));
                              for (Map.Entry<Insanity, String> _iter52 : _iter51.entrySet())
                              {
                                _iter52.getKey().write(oprot);
                                oprot.writeString(_iter52.getValue());
                              }
                              oprot.writeMapEnd();
                            }
                          }
                          oprot.writeListEnd();
                        }
                      }
                      oprot.writeSetEnd();
                    }
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrazyNestingTupleSchemeFactory implements SchemeFactory {
    public CrazyNestingTupleScheme getScheme() {
      return new CrazyNestingTupleScheme();
    }
  }

  private static class CrazyNestingTupleScheme extends TupleScheme<CrazyNesting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrazyNesting struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.list_field.size());
        for (Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> _iter53 : struct.list_field)
        {
          {
            oprot.writeI32(_iter53.size());
            for (Map.Entry<Set<Integer>, Map<Integer,Set<List<Map<Insanity,String>>>>> _iter54 : _iter53.entrySet())
            {
              {
                oprot.writeI32(_iter54.getKey().size());
                for (int _iter55 : _iter54.getKey())
                {
                  oprot.writeI32(_iter55);
                }
              }
              {
                oprot.writeI32(_iter54.getValue().size());
                for (Map.Entry<Integer, Set<List<Map<Insanity,String>>>> _iter56 : _iter54.getValue().entrySet())
                {
                  oprot.writeI32(_iter56.getKey());
                  {
                    oprot.writeI32(_iter56.getValue().size());
                    for (List<Map<Insanity,String>> _iter57 : _iter56.getValue())
                    {
                      {
                        oprot.writeI32(_iter57.size());
                        for (Map<Insanity,String> _iter58 : _iter57)
                        {
                          {
                            oprot.writeI32(_iter58.size());
                            for (Map.Entry<Insanity, String> _iter59 : _iter58.entrySet())
                            {
                              _iter59.getKey().write(oprot);
                              oprot.writeString(_iter59.getValue());
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetString_field()) {
        optionals.set(0);
      }
      if (struct.isSetSet_field()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetString_field()) {
        oprot.writeString(struct.string_field);
      }
      if (struct.isSetSet_field()) {
        {
          oprot.writeI32(struct.set_field.size());
          for (Insanity _iter60 : struct.set_field)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrazyNesting struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.list_field = new ArrayList<Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>>(_list61.size);
        for (int _i62 = 0; _i62 < _list61.size; ++_i62)
        {
          Map<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>> _elem63; // required
          {
            org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.SET, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            _elem63 = new HashMap<Set<Integer>,Map<Integer,Set<List<Map<Insanity,String>>>>>(2*_map64.size);
            for (int _i65 = 0; _i65 < _map64.size; ++_i65)
            {
              Set<Integer> _key66; // required
              Map<Integer,Set<List<Map<Insanity,String>>>> _val67; // required
              {
                org.apache.thrift.protocol.TSet _set68 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _key66 = new HashSet<Integer>(2*_set68.size);
                for (int _i69 = 0; _i69 < _set68.size; ++_i69)
                {
                  int _elem70; // required
                  _elem70 = iprot.readI32();
                  _key66.add(_elem70);
                }
              }
              {
                org.apache.thrift.protocol.TMap _map71 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, iprot.readI32());
                _val67 = new HashMap<Integer,Set<List<Map<Insanity,String>>>>(2*_map71.size);
                for (int _i72 = 0; _i72 < _map71.size; ++_i72)
                {
                  int _key73; // required
                  Set<List<Map<Insanity,String>>> _val74; // required
                  _key73 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TSet _set75 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                    _val74 = new HashSet<List<Map<Insanity,String>>>(2*_set75.size);
                    for (int _i76 = 0; _i76 < _set75.size; ++_i76)
                    {
                      List<Map<Insanity,String>> _elem77; // required
                      {
                        org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                        _elem77 = new ArrayList<Map<Insanity,String>>(_list78.size);
                        for (int _i79 = 0; _i79 < _list78.size; ++_i79)
                        {
                          Map<Insanity,String> _elem80; // required
                          {
                            org.apache.thrift.protocol.TMap _map81 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                            _elem80 = new HashMap<Insanity,String>(2*_map81.size);
                            for (int _i82 = 0; _i82 < _map81.size; ++_i82)
                            {
                              Insanity _key83; // required
                              String _val84; // required
                              _key83 = new Insanity();
                              _key83.read(iprot);
                              _val84 = iprot.readString();
                              _elem80.put(_key83, _val84);
                            }
                          }
                          _elem77.add(_elem80);
                        }
                      }
                      _val74.add(_elem77);
                    }
                  }
                  _val67.put(_key73, _val74);
                }
              }
              _elem63.put(_key66, _val67);
            }
          }
          struct.list_field.add(_elem63);
        }
      }
      struct.setList_fieldIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.string_field = iprot.readString();
        struct.setString_fieldIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set85 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.set_field = new HashSet<Insanity>(2*_set85.size);
          for (int _i86 = 0; _i86 < _set85.size; ++_i86)
          {
            Insanity _elem87; // required
            _elem87 = new Insanity();
            _elem87.read(iprot);
            struct.set_field.add(_elem87);
          }
        }
        struct.setSet_fieldIsSet(true);
      }
    }
  }

}

